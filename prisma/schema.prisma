// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client" // Ensures reusability
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model User {
  id           String    @id @default(uuid())
  firebase_uid String    @unique
  slug         String?   @unique
  name         String
  email        String    @unique
  githubId     String    @unique
  headline     String?
  cover_image  String?
  avatar       String?
  bio          String?
  skills       Skill[]
  interests    String[]
  experience   Int?
  projects     Project[] @relation("UserProjects")

  // Fixed Many-to-Many for Followers & Following
  followers User[] @relation("UserFollowRelation")
  following User[] @relation("UserFollowRelation")

  // Fixed One-to-Many for Connections
  sentConnections     Connection[] @relation("SentConnections")
  receivedConnections Connection[] @relation("ReceivedConnections")

  // Fixed One-to-Many for Messages
  sentMessages     Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReciever")

  // Fixed One-to-Many for Notifications
  sentNotifications     Notification[] @relation("notificationSender")
  recievedNotifications Notification[] @relation("notificationReciever")

  location   Location? @relation(fields: [locationId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  locationId String?
  embedding  Json?

  @@map("users")
}

model Project {
  id          String   @id @default(uuid())
  name        String   @unique
  techstack   String[]
  description String?
  projectLink String?
  ownerId     String // Store only the user ID (owner)
  owner       User     @relation("UserProjects", fields: [ownerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("projects")
}

model Connection {
  id         String           @id @default(uuid())
  senderId   String?
  sender     User?            @relation("SentConnections", fields: [senderId], references: [id], onDelete: SetNull)
  receiverId String?
  receiver   User?            @relation("ReceivedConnections", fields: [receiverId], references: [id], onDelete: SetNull)
  status     ConnectionStatus @default(PENDING)
  createdAt  DateTime         @default(now())

  @@index([senderId, receiverId], name: "SenderReceiverIndex")
  @@map("connections")
}

model Message {
  id         String   @id @default(uuid())
  senderid   String
  receiverid String
  content    String
  timestamp  DateTime @default(now())

  sender   User @relation("MessageSender", fields: [senderid], references: [id])
  receiver User @relation("MessageReciever", fields: [receiverid], references: [id])

  @@map("messages")
}

enum NotificationType {
  CONNECTION_REQUEST
  MESSAGE
  FOLLOW
}

model Notification {
  id         String           @id @default(uuid())
  type       NotificationType
  typeId     String?
  recieverId String
  senderId   String
  message    String
  isRead     Boolean          @default(false)
  createdAt  DateTime         @default(now())

  sender   User @relation("notificationSender", fields: [senderId], references: [id])
  reciever User @relation("notificationReciever", fields: [recieverId], references: [id])

  @@map("notifications")
}

model Location {
  id        String  @id @default(uuid())
  latitude  Float?
  longitude Float?
  city      String?
  country   String?
  state     String?
  users     User[]

  @@map("locations")
}

model Skill {
  id    String @id @default(uuid())
  name  String @unique
  users User[]

  @@map("skills")
}

// enum Availability {
//   FULL_TIME
//   PART_TIME
//   FREELANCE
//   OPEN_SOURCE
// }
